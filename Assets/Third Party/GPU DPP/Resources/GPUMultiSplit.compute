#pragma enable_d3d11_debug_symbols

#pragma kernel preScan
#pragma kernel postScan
#pragma kernel rearrangeKeyValue
#pragma kernel updateSplitPoint32
#pragma use_dxc
#define MULTI_SPLIT_BLOCK_SIZE 256

uint BucketCount;
uint ElementCountOffset;
uint GroupCountOffset;
uint SplitPointOffset;

StructuredBuffer<int> Argument_R;
RWStructuredBuffer<int> Argument_RW;

StructuredBuffer<uint> Key_R;
StructuredBuffer<uint> Value_R;
StructuredBuffer<uint> NewIndex_R;
RWStructuredBuffer<uint> NewIndex_RW;
RWStructuredBuffer<uint3> DEBUG;

StructuredBuffer<uint> WarpLevelHistogramOffset_R;
RWStructuredBuffer<uint> WarpLevelHistogram_RW;

groupshared uint LocalWarpLevelHistogram[MULTI_SPLIT_BLOCK_SIZE];
groupshared uint LocalOffset[MULTI_SPLIT_BLOCK_SIZE];

uint4 Mask(uint4 vInput, uint vCount)
{
    uint MainIndex = vCount / 32;
    uint Pad = vCount % 32;
    vInput[MainIndex] &= (0XFFFFFFFF >> (32 - Pad - 1));
    for (int c = 0; c < MainIndex; c++)
    {
        vInput[c] = 0;
    }
    return vInput;
}

uint CountBits(uint4 vInput)
{
    uint4 CurrBucketCount = countbits(vInput);
    return CurrBucketCount.r + CurrBucketCount.g + CurrBucketCount.b + CurrBucketCount.a;
}

[numthreads(MULTI_SPLIT_BLOCK_SIZE, 1, 1)]
void preScan(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint ElementCount = (uint) Argument_R[ElementCountOffset];
    uint GroupCount = (uint) Argument_R[GroupCountOffset];
	LocalWarpLevelHistogram[ThreadIdx] = 0;
	GroupMemoryBarrierWithGroupSync();
    
    uint i = ThreadIdx + GroupIdx * MULTI_SPLIT_BLOCK_SIZE;
    
    uint CurrBucket = BucketCount - 1;
    if (i < ElementCount)
        CurrBucket = Key_R[i];
    
    uint CurrLaneIndex = WaveGetLaneIndex();
    uint CurrLaneCount = WaveGetLaneCount();
    
    uint CeilElementCount = ceil((float) ElementCount / CurrLaneCount) * CurrLaneCount;
    
    uint CurrWarpIndex = ThreadIdx / CurrLaneCount;
    uint PrevBlockWarpCount = GroupIdx == 0 ? 0 : ceil((float) MULTI_SPLIT_BLOCK_SIZE / CurrLaneCount);
    uint CurrBlockWarpCount = GroupIdx == GroupCount - 1 ? ceil((float) (CeilElementCount - GroupIdx * MULTI_SPLIT_BLOCK_SIZE) / CurrLaneCount) : ceil((float) MULTI_SPLIT_BLOCK_SIZE / CurrLaneCount);

    uint4 BallotResultBitCount = 0;
    for (int c = 0; c < BucketCount; c++)
    {
        uint4 BallotResult = WaveActiveBallot(c == CurrBucket);
        if (c == CurrBucket)
        {
            BallotResultBitCount = BallotResult;
            LocalWarpLevelHistogram[CurrBucket * CurrBlockWarpCount + CurrWarpIndex] = CountBits(BallotResult);
        }
    }
    GroupMemoryBarrierWithGroupSync();
    
    if (ThreadIdx < CurrBlockWarpCount * BucketCount)
    {
        int WarpCount = ceil((float) CeilElementCount / CurrLaneCount);
        int WarpIndex = ThreadIdx % CurrBlockWarpCount;
        int Bucket = ThreadIdx / CurrBlockWarpCount;
        
		WarpLevelHistogram_RW[Bucket * WarpCount + GroupIdx * PrevBlockWarpCount + WarpIndex] = LocalWarpLevelHistogram[ThreadIdx];
	}
}

[numthreads(MULTI_SPLIT_BLOCK_SIZE, 1, 1)]
void postScan(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint ElementCount = (uint) Argument_R[ElementCountOffset];
    uint GroupCount = (uint) Argument_R[GroupCountOffset];
	LocalWarpLevelHistogram[ThreadIdx] = 0;
	LocalOffset[ThreadIdx] = 0;
	GroupMemoryBarrierWithGroupSync();
    
    uint i = ThreadIdx + GroupIdx * MULTI_SPLIT_BLOCK_SIZE;
    
    uint CurrBucket = BucketCount - 1;
    if (i < ElementCount)
        CurrBucket = Key_R[i];
    
    uint CurrLaneIndex = WaveGetLaneIndex();
    uint CurrLaneCount = WaveGetLaneCount();
    
    uint CeilElementCount = ceil((float) ElementCount / CurrLaneCount) * CurrLaneCount;
    
    uint CurrWarpIndex = ThreadIdx / CurrLaneCount;
    uint PrevBlockWarpCount = GroupIdx == 0 ? 0 : ceil((float) MULTI_SPLIT_BLOCK_SIZE / CurrLaneCount);
    uint CurrBlockWarpCount = GroupIdx == GroupCount - 1 ? 
        ceil((float) (CeilElementCount - GroupIdx * MULTI_SPLIT_BLOCK_SIZE) / CurrLaneCount) : 
        ceil((float) MULTI_SPLIT_BLOCK_SIZE / CurrLaneCount);
    
    //local histogram and local offset
    uint4 CurrBucketMask;
    for (int c = 0; c < BucketCount; c++)
    {
        uint4 BallotResult = WaveActiveBallot(CurrBucket == c);
        if (CurrBucket == c)
			LocalWarpLevelHistogram[CurrWarpIndex * CurrLaneCount + c] = CountBits(BallotResult);
        
        if(CurrBucket == c)
        {
            CurrBucketMask = BallotResult;
        }
    }
    CurrBucketMask = Mask(CurrBucketMask, CurrLaneIndex);
    LocalOffset[ThreadIdx] = CountBits(CurrBucketMask) - 1;
    GroupMemoryBarrierWithGroupSync();
    
    //new index
    uint InWarpOffset = LocalOffset[ThreadIdx];
    
    uint WarpCount = ceil((float) CeilElementCount / CurrLaneCount);
    uint GlobalOffset = WarpLevelHistogramOffset_R[CurrBucket * WarpCount + GroupIdx * PrevBlockWarpCount + CurrWarpIndex];
    
    uint NewIndex = GlobalOffset + InWarpOffset;
    
    if (i >= ElementCount)
        return;
    
    NewIndex_RW[i] = NewIndex;
}

[numthreads(32, 1, 1)]
void updateSplitPoint32(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint ElementCount = (uint) Argument_RW[ElementCountOffset];
    uint CeilElementCount = ceil((float) ElementCount / 32) * 32;
    uint WarpCount = ceil((float) CeilElementCount / 32);
    
    if (ThreadIdx < BucketCount)
        Argument_RW[SplitPointOffset + ThreadIdx] = WarpLevelHistogramOffset_R[(ThreadIdx + 1) * WarpCount];
    else
        Argument_RW[SplitPointOffset + ThreadIdx] = 0;
}

StructuredBuffer<uint> OldKey_R;
StructuredBuffer<uint> OldValue_R;
RWStructuredBuffer<uint> NewKey_RW;
RWStructuredBuffer<uint> NewValue_RW;
[numthreads(MULTI_SPLIT_BLOCK_SIZE, 1, 1)]
void rearrangeKeyValue(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint ElementCount = Argument_R[ElementCountOffset];
    uint i = ThreadIdx + GroupIdx * MULTI_SPLIT_BLOCK_SIZE;
    uint NewIndex = NewIndex_R[i];
    
    if (i >= ElementCount)
        return;
    
    NewKey_RW[NewIndex] = OldKey_R[i];
    NewValue_RW[NewIndex] = OldValue_R[i];
}