#include "Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel markParticleByCellType
#pragma kernel gatherGridToOnlyRegularParticle
#pragma kernel gatherGridToIntersectCellParticle
#pragma kernel gatherGridToOnlyTallCellParticle
#pragma kernel scatterParticleToTallCellGrid_Pass1
#pragma kernel scatterParticleToTallCellGrid_Pass2
#pragma kernel scatterOnlyRegularParticleToGrid_Pass1
#pragma kernel scatterOnlyRegularParticleToGrid_Pass2
#pragma kernel computeH1H2WithParticle_Pass1
#pragma kernel computeH1H2WithParticle_Pass2
#pragma use_dxc

uint ParticleCountArgumentOffset;
uint DifferParticleSplitPointArgumentOffset;
uint DifferParticleCountArgumentOffset;
uint OnlyTallCellParticleType;
uint IntersectCellParticleType;
uint OnlyRegularCellParticleType;
uint TargetParticleType;

RWStructuredBuffer<float3> DEBUG;

StructuredBuffer<int> ParticleIndirectArgment_R;

StructuredBuffer<float3> ParticlePosition_R;

StructuredBuffer<float3> ParticleVelocity_R;
RWStructuredBuffer<float3> ParticleVelocity_RW;

Texture2D<float> TerrianHeight_R;
Texture2D<float> TallCellHeight_R;

Texture3D<float3> RegularCellVelocity_R;
RWTexture3D<float3> RegularCellVelocity_RW;
Texture2D<float3> TopCellVelocity_R;
RWTexture2D<float3> TopCellVelocity_RW;
Texture2D<float3> BottomCellVelocity_R;
RWTexture2D<float3> BottomCellVelocity_RW;

StructuredBuffer<uint> ParticleFilter_R;
RWStructuredBuffer<uint> ParticleFilter_RW;

static int2 OffsetVector2D[3 * 3] =
{
    { -1, 0 },
    { 1, 0 },
    { 0, -1 },
    { 0, 1 },
    { 1, 1 },
    { -1, -1 },
    { -1, 1 },
    { 1, -1 },
    { 0, 0 }
};

static int3 OffsetVector3D[3 * 3 * 3] =
{
    { -1, 0, 0},
    { 1, 0, 0 },
    { 0, -1, 0 },
    { 0, 1, 0 },
    { 1, 1, 0 },
    { -1, -1, 0 },
    { -1, 1, 0 },
    { 1, -1, 0 },
    { 0, 0, 0 },
    
    { -1, 0, 1 },
    { 1, 0, 1 },
    { 0, -1, 1 },
    { 0, 1, 1 },
    { 1, 1, 1 },
    { -1, -1, 1 },
    { -1, 1, 1 },
    { 1, -1, 1 },
    { 0, 0, 1 },
    
    { -1, 0, -1 },
    { 1, 0, -1 },
    { 0, -1, -1 },
    { 0, 1, -1 },
    { 1, 1, -1 },
    { -1, -1, -1 },
    { -1, 1, -1 },
    { 1, -1, -1 },
    { 0, 0, -1 }
};

[numthreads(THREAD_COUNT_1D, 1, 1)]
void markParticleByCellType(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i >= ParticleIndirectArgment_R[ParticleCountArgumentOffset])
        return;
    
    float3 CurrPosition = ParticlePosition_R[i];
    float RelativeHeight = CurrPosition.y - Min.y;
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    
    uint2 CurrGridXZIndex = RelativeXZ / CellLength;
    
    float CenterTerrianHeight = TerrianHeight_R[CurrGridXZIndex];
    float CenterTallCellHeight = TallCellHeight_R[CurrGridXZIndex];
    
    bool IsInTerrianCell = false;
    bool IsInTallCell = false;
    bool IsAnyTallCellHigher = false;
    bool IsAnyTallCellLower = false;
    
    if (RelativeHeight < CenterTerrianHeight)
        IsInTerrianCell = true;
    
    if (RelativeHeight < CenterTerrianHeight + CenterTallCellHeight && RelativeHeight >= CenterTerrianHeight)
        IsInTallCell = true;
    
    for (int c = 0; c < 3 * 3 - 1; c++)
    {
        int2 Adj = CurrGridXZIndex + OffsetVector2D[c];
        if (any(Adj < 0) || any(Adj >= XZResolution))
            continue;
        
        float SurroundTerrianHeight = TerrianHeight_R[Adj];
        float SurroundTallCellHeight = TallCellHeight_R[Adj];
        
        if (RelativeHeight <= SurroundTallCellHeight + SurroundTerrianHeight + CellLength)
        {
            IsAnyTallCellHigher = true;
        }
        
        if (RelativeHeight >= SurroundTallCellHeight + SurroundTerrianHeight - CellLength)
        {
            IsAnyTallCellLower = true;
        }
    }
    
    if (!IsInTallCell && !IsInTerrianCell)
    {
        if (!IsAnyTallCellHigher)
            ParticleFilter_RW[i] = 0;
        else
            ParticleFilter_RW[i] = 1;
    }
    else if (IsInTallCell && !IsInTerrianCell)
    {
        if (!IsAnyTallCellLower)
            ParticleFilter_RW[i] = 3;
        else
            ParticleFilter_RW[i] = 1;
    }
    else
    {
        ParticleFilter_RW[i] = 4;
    }
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void gatherGridToOnlyRegularParticle(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint Count = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + OnlyRegularCellParticleType];
    uint Offset = OnlyRegularCellParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + OnlyRegularCellParticleType - 1];
    uint i = Offset + ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i - Offset >= Count)
        return;
    
    float3 CurrPosition = ParticlePosition_R[i];
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    float RelativeY = CurrPosition.y - Min.y;
    float3 RelativePosition = float3(RelativeXZ.x, RelativeY, RelativeXZ.y);
    
    uint2 CurrGridXZIndex = RelativeXZ / CellLength;
    uint CurrGridYIndex = RelativePosition.y / CellLength;
    uint3 CurrCenterCell3DIndex = uint3(CurrGridXZIndex.x, CurrGridYIndex, CurrGridXZIndex.y);
    float3 CurrCenterCellPosition = CurrCenterCell3DIndex * CellLength + float3(0.5f, 0.5f, 0.5f) * CellLength;
    
    float WeightSum = 0.0f;
    float3 WeightValue = float3(0, 0, 0);
    for (int c = 0; c < 3 * 3 * 3; c++)
    {
        float3 AdjPoint = CurrCenterCellPosition + OffsetVector3D[c] * CellLength;
        int2 AdjXZ = AdjPoint.xz / CellLength;
        
        if (any(AdjXZ < 0) || any(AdjXZ >= XZResolution))
            continue;
        
        float AdjTerrianHeight = TerrianHeight_R[AdjXZ];
        float AdjTallCellHeight = TallCellHeight_R[AdjXZ];
        float Weight = 0.0f;
        float3 Value = float3(0, 0, 0);
        if (AdjPoint.y >= AdjTerrianHeight + AdjTallCellHeight && AdjPoint.y < AdjTerrianHeight + AdjTallCellHeight + ConstantCellNum * CellLength)
        {
            uint YIndex = (AdjPoint.y - AdjTerrianHeight - AdjTallCellHeight) / CellLength;
            Value = RegularCellVelocity_R[uint3(AdjXZ.x, YIndex, AdjXZ.y)];
            Weight = CubicKernel(length(AdjPoint - CurrPosition) / CellLength);
        }
        else
        {
            Value = float3(0, 0, 0);
            Weight = 0;
        }
        WeightValue += Value * Weight;
        WeightSum += Weight;
    }
    
    float3 FinalValue = float3(0, 0, 0);
    if (WeightSum != 0)
        FinalValue = WeightValue / WeightSum;
    ParticleVelocity_RW[i] = FinalValue;
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void gatherGridToIntersectCellParticle(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint Count = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + IntersectCellParticleType];
    uint Offset = IntersectCellParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + IntersectCellParticleType - 1];
    uint i = Offset + ThreadIdx + GroupIdx.x * THREAD_COUNT_1D;
    if (i - Offset >= Count)
        return;
    
    float3 CurrPosition = ParticlePosition_R[i];
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    float RelativeY = CurrPosition.y - Min.y;
    float3 RelativePosition = float3(RelativeXZ.x, RelativeY, RelativeXZ.y);
    
    uint2 CurrGridXZIndex = RelativeXZ / CellLength;
    uint CurrGridYIndex = RelativePosition.y / CellLength;
    uint3 CurrCenterCell3DIndex = uint3(CurrGridXZIndex.x, CurrGridYIndex, CurrGridXZIndex.y);
    float3 CurrCenterCellPosition = CurrCenterCell3DIndex * CellLength + float3(0.5f, 0.5f, 0.5f) * CellLength;
    
    float WeightSum = 0.0f;
    float3 WeightValue = float3(0, 0, 0);
    for (int c = 0; c < 3 * 3 * 3; c++)
    {
        float3 AdjPoint = CurrCenterCellPosition + OffsetVector3D[c] * CellLength;
        int2 AdjXZ = AdjPoint.xz / CellLength;
        
        if (any(AdjXZ < 0) || any(AdjXZ >= XZResolution))
            continue;
        
        float AdjTerrianHeight = TerrianHeight_R[AdjXZ];
        float AdjTallCellHeight = TallCellHeight_R[AdjXZ];
        float3 Value = float3(0, 0, 0);
        float Weight = CubicKernel(length(AdjPoint - CurrPosition) / CellLength);
        if (AdjPoint.y >= AdjTerrianHeight + AdjTallCellHeight && AdjPoint.y < AdjTerrianHeight + AdjTallCellHeight + ConstantCellNum * CellLength)
        {
            uint YIndex = (AdjPoint.y - AdjTerrianHeight - AdjTallCellHeight) / CellLength;
            Value = RegularCellVelocity_R[uint3(AdjXZ.x, YIndex, AdjXZ.y)];
        }
        else if (AdjPoint.y >= 0 && AdjPoint.y < AdjTerrianHeight + AdjTallCellHeight)
        {
            float3 TopValue = TopCellVelocity_R[RelativeXZ];
            float3 BottomValue = BottomCellVelocity_R[RelativeXZ];
            float RelativeHeight = (RelativePosition.y - AdjTerrianHeight) / AdjTallCellHeight;
            Value = RelativeHeight * (TopValue - BottomValue) + BottomValue;
        }
        else
        {
            Value = float3(0, 0, 0);
            Weight = 0;
        }
        WeightValue += Value * Weight;
        WeightSum += Weight;
    }
    
    float3 FinalValue = float3(0, 0, 0);
    if (WeightSum != 0)
        FinalValue = WeightValue / WeightSum;
    ParticleVelocity_RW[i] = FinalValue;
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void gatherGridToOnlyTallCellParticle(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint Count = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + OnlyTallCellParticleType];
    uint Offset = OnlyTallCellParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + OnlyTallCellParticleType - 1];
    uint i = Offset + ThreadIdx + GroupIdx.x * THREAD_COUNT_1D;
    if (i - Offset >= Count)
        return;
    
    float3 CurrPosition = ParticlePosition_R[i];
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    float RelativeY = CurrPosition.y - Min.y;
    float3 RelativePosition = float3(RelativeXZ.x, RelativeY, RelativeXZ.y);
    
    uint2 CurrGridXZIndex = RelativeXZ / CellLength;
    float CenterTerrianHeight = TerrianHeight_R[RelativeXZ];
    float CenterTallCellHeight = TallCellHeight_R[RelativeXZ];
    
    float3 Value = float3(0, 0, 0);
    if (RelativePosition.y >= 0 && RelativePosition.y < CenterTerrianHeight + CenterTallCellHeight)
    {
        float3 TopValue = TopCellVelocity_R[RelativeXZ];
        float3 BottomValue = BottomCellVelocity_R[RelativeXZ];
        float RelativeHeight = (RelativePosition.y - CenterTerrianHeight) / CenterTallCellHeight;
        Value = RelativeHeight * (TopValue - BottomValue) + BottomValue;
    }
    ParticleVelocity_RW[i] = Value;
}

uint doCLZLowToHigh(uint4 vInput, uint vTargetBit)
{
    uint Result = 0;
    
    uint Index = vTargetBit / 32;
    uint Offset = vTargetBit % 32;
    
    for (int c = Index; c < 4; c++)
    {
        if (c == Index)
            vInput[c] &= ~(0xFFFFFFFF >> (32 - Offset - 1));
        
        uint FirstIndex = firstbitlow(vInput[c]);
        if (FirstIndex != 0xFFFFFFFF)
        {
            Result += FirstIndex - Offset - 1;
            break;
        }
        else
        {
            Result += 32 - Offset - 1;
            Offset = -1;
        }
    }
    return Result;
}

uint doCLZHighToLow(uint4 vInput, uint vTargetBit)
{
    uint Result = 0;
    
    uint Index = vTargetBit / 32;
    uint Offset = vTargetBit % 32;
    
    for (int c = Index; c >= 0; c--)
    {
        if (c == Index)
            vInput[c] &= ~((0xFFFFFFFF >> Offset) << Offset);
        
        uint FirstIndex = firstbithigh(vInput[c]);
        if (FirstIndex != 0xFFFFFFFF)
        {
            Result += Offset - FirstIndex - 1;
            break;
        }
        else
        {
            Result += Offset;
            Offset = 32;
        }
    }
    return Result;
}

uint4 MaskUnusedBit(uint4 vInput, uint vLaneCount)
{
    uint Index = vLaneCount / 32;
    uint Offset = vLaneCount % 32;
    vInput[Index] |= (0xFFFFFFFF << Offset);
    for (int c = Index + 1; c < 4; c++)
    {
        vInput[Index] |= 0xFFFFFFFF;
    }
    return vInput;
}

#define ZIP 10000000
Texture2D<int> ParticleCount_R;
Texture3D<int> XSum_R;
Texture3D<int> XXSum_R;
Texture3D<int> YSum_R;
Texture3D<int> XYSum_R;

RWTexture2D<int> ParticleCount_RW;
RWTexture3D<int> XSum_RW;
RWTexture3D<int> XXSum_RW;
RWTexture3D<int> YSum_RW;
RWTexture3D<int> XYSum_RW;

groupshared float LocalWeight[THREAD_COUNT_1D];
groupshared float3 LocalWeightedVelocity[THREAD_COUNT_1D];

[numthreads(THREAD_COUNT_1D, 1, 1)]
void scatterParticleToTallCellGrid_Pass1(uint ThreadIdx : SV_GroupIndex, uint3 GroupIdx : SV_GroupID)
{
    uint CurrLaneIndex = WaveGetLaneIndex();
    uint CurrLaneCount = WaveGetLaneCount();
    uint CurrWarpIndex = ThreadIdx / CurrLaneCount;
    
    uint Count = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + TargetParticleType];
    uint Offset = TargetParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + TargetParticleType - 1];
    uint i = Offset + ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i - Offset >= Count)
        return;
    
    float3 CurrPosition = ParticlePosition_R[i];
    float3 CurrVelocity = ParticleVelocity_R[i];
    
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    float RelativeY = CurrPosition.y - Min.y;
    float3 RelativePosition = float3(RelativeXZ.x, RelativeY, RelativeXZ.y);
    
    uint2 CurrGridXZIndex = RelativePosition.xz / CellLength;
    uint CurrGridYIndex = RelativePosition.y / CellLength;
    
    uint CurrTallCellLinerIndex = computeMorton2D((uint2) (RelativeXZ / CellLength));
    uint PrevTallCellLinerIndex = ThreadIdx == 0 ? 0 : WaveReadLaneAt(CurrTallCellLinerIndex, CurrLaneIndex - 1);
    uint NextTallCellLinerIndex = ThreadIdx == CurrLaneCount - 1 ? 0 : WaveReadLaneAt(CurrTallCellLinerIndex, CurrLaneIndex + 1);
    
    //r: Lane31~Lane0, g: Lane63~Lane32...
    uint4 BallotResult1 = WaveActiveBallot(ThreadIdx == 0 || PrevTallCellLinerIndex != CurrTallCellLinerIndex);
    uint4 BallotResult2 = WaveActiveBallot(ThreadIdx == CurrLaneCount - 1 || NextTallCellLinerIndex != CurrTallCellLinerIndex);
    uint IntraOffset = doCLZHighToLow(MaskUnusedBit(BallotResult2, CurrLaneCount), CurrLaneIndex);
    uint InvIntraOffset = doCLZLowToHigh(MaskUnusedBit(BallotResult1, CurrLaneCount), CurrLaneIndex);
    uint RegionLength = InvIntraOffset + IntraOffset + 1;
    
    //warp level reduce
    float CenterTerrianHeight = TerrianHeight_R[RelativeXZ];
    float CenterTallCellHeight = TallCellHeight_R[RelativeXZ];
    
    if (RelativePosition.y - CenterTerrianHeight > CenterTallCellHeight + CellLength)
        return;
    
    int ParticleIncFactor = 1;
    float X = (RelativePosition.y - CenterTerrianHeight) / (CenterTallCellHeight + CellLength);
    float XX = X * X;
    float3 Y = CurrVelocity;
    float3 XY = X * Y;
        
    for (int k = 0; k < ceil(log2(RegionLength)); k++)
    {
        uint IntraEnd = floor((float) RegionLength / pow(2.0f, k + 1));
        uint Offset = ceil((float) RegionLength / pow(2.0f, k + 1));
            
        int AnotherParticleIncFactor = WaveReadLaneAt(ParticleIncFactor, CurrLaneIndex + Offset);
        float AnotherX = WaveReadLaneAt(X, CurrLaneIndex + Offset);
        float3 AnotherY = WaveReadLaneAt(Y, CurrLaneIndex + Offset);
        float AnotherXX = WaveReadLaneAt(XX, CurrLaneIndex + Offset);
        float3 AnotherXY = WaveReadLaneAt(XY, CurrLaneIndex + Offset);
        if (IntraOffset < IntraEnd)
        {
            ParticleIncFactor += AnotherParticleIncFactor;
            X += AnotherX;
            Y += AnotherY;
            XX += AnotherXX;
            XY += AnotherXY;
        }
    }
        
    if (IntraOffset == 0)
    {
        InterlockedAdd(ParticleCount_RW[CurrGridXZIndex], ParticleIncFactor);
            
        int XIntZIP = X;
        int XFloatZIP = (X - XIntZIP) * ZIP;
        InterlockedAdd(XSum_RW[uint3(CurrGridXZIndex, 0)], XIntZIP);
        InterlockedAdd(XSum_RW[uint3(CurrGridXZIndex, 1)], XFloatZIP);
            
        int XXIntZIP = XX;
        int XXFloatZIP = (XX - XXIntZIP) * ZIP;
        InterlockedAdd(XXSum_RW[uint3(CurrGridXZIndex, 0)], XXIntZIP);
        InterlockedAdd(XXSum_RW[uint3(CurrGridXZIndex, 1)], XXFloatZIP);
            
        int3 YIntZIP = Y;
        int3 YFloatZIP = (Y - YIntZIP) * ZIP;
        InterlockedAdd(YSum_RW[uint3(CurrGridXZIndex, 0)], YIntZIP.x);
        InterlockedAdd(YSum_RW[uint3(CurrGridXZIndex, 1)], YIntZIP.y);
        InterlockedAdd(YSum_RW[uint3(CurrGridXZIndex, 2)], YIntZIP.z);
        InterlockedAdd(YSum_RW[uint3(CurrGridXZIndex, 3)], YFloatZIP.x);
        InterlockedAdd(YSum_RW[uint3(CurrGridXZIndex, 4)], YFloatZIP.y);
        InterlockedAdd(YSum_RW[uint3(CurrGridXZIndex, 5)], YFloatZIP.z);
            
        int3 XYIntZIP = XY;
        int3 XYFloatZIP = (XY - XYIntZIP) * ZIP;
        InterlockedAdd(XYSum_RW[uint3(CurrGridXZIndex, 0)], XYIntZIP.x);
        InterlockedAdd(XYSum_RW[uint3(CurrGridXZIndex, 1)], XYIntZIP.y);
        InterlockedAdd(XYSum_RW[uint3(CurrGridXZIndex, 2)], XYIntZIP.z);
        InterlockedAdd(XYSum_RW[uint3(CurrGridXZIndex, 3)], XYFloatZIP.x);
        InterlockedAdd(XYSum_RW[uint3(CurrGridXZIndex, 4)], XYFloatZIP.y);
        InterlockedAdd(XYSum_RW[uint3(CurrGridXZIndex, 5)], XYFloatZIP.z);
    }
}

[numthreads(THREAD_COUNT_2D, THREAD_COUNT_2D, 1)]
void scatterParticleToTallCellGrid_Pass2(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xy >= XZResolution))
        return;
    
    float XSum = XSum_R[uint3(DispatchThreadID.xy, 0)] + (XSum_R[uint3(DispatchThreadID.xy, 1)] / (float) ZIP);
    float XXSum = XXSum_R[uint3(DispatchThreadID.xy, 0)] + (XXSum_R[uint3(DispatchThreadID.xy, 1)] / (float) ZIP);
    float3 YSum = float3(
        YSum_R[uint3(DispatchThreadID.xy, 0)] + (YSum_R[uint3(DispatchThreadID.xy, 3)] / (float) ZIP),
        YSum_R[uint3(DispatchThreadID.xy, 1)] + (YSum_R[uint3(DispatchThreadID.xy, 4)] / (float) ZIP),
        YSum_R[uint3(DispatchThreadID.xy, 2)] + (YSum_R[uint3(DispatchThreadID.xy, 5)] / (float) ZIP)
    );
    float3 XYSum = float3(
        XYSum_R[uint3(DispatchThreadID.xy, 0)] + XYSum_R[uint3(DispatchThreadID.xy, 3)] / (float) ZIP,
        XYSum_R[uint3(DispatchThreadID.xy, 1)] + XYSum_R[uint3(DispatchThreadID.xy, 4)] / (float) ZIP,
        XYSum_R[uint3(DispatchThreadID.xy, 2)] + XYSum_R[uint3(DispatchThreadID.xy, 5)] / (float) ZIP
    );
    
    uint M = ParticleCount_R[DispatchThreadID.xy];
    
    float CenterTerrianHeight = TerrianHeight_R[DispatchThreadID.xy];
    float CenterTallCellHeight = TallCellHeight_R[DispatchThreadID.xy];
    
    float Factor = M * XXSum - pow(XSum, 2);
    float3 Sigma0 = (XXSum * YSum - XSum * XYSum) / Factor;
    float3 Sigma1 = (M * XYSum - XSum * YSum) / Factor;
    float3 TopValue = Sigma0 + Sigma1 * (CenterTallCellHeight / (CenterTallCellHeight + CellLength));
    float3 BottomValue = Sigma0;
    
    if (abs(Factor - 0.0f) < EPSILON)
    {
        TopValue = BottomValue = (M == 0 ? float3(0, 0, 0) : YSum / (float) M);
    }
    
    TopCellVelocity_RW[DispatchThreadID.xy] = TopValue;
    BottomCellVelocity_RW[DispatchThreadID.xy] = BottomValue;
}

Texture3D<int> RegularCellWeight_R;
Texture3D<int> RegularCellWeightedVelocity_R_R;
Texture3D<int> RegularCellWeightedVelocity_G_R;
Texture3D<int> RegularCellWeightedVelocity_B_R;
RWTexture3D<int> RegularCellWeight_RW;
RWTexture3D<int> RegularCellWeightedVelocity_R_RW;
RWTexture3D<int> RegularCellWeightedVelocity_G_RW;
RWTexture3D<int> RegularCellWeightedVelocity_B_RW;
[numthreads(THREAD_COUNT_1D, 1, 1)]
void scatterOnlyRegularParticleToGrid_Pass1(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint CurrLaneIndex = WaveGetLaneIndex();
    uint CurrLaneCount = WaveGetLaneCount();
    
    uint Count = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + TargetParticleType];
    uint Offset = TargetParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + TargetParticleType - 1];
    uint i = Offset + ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i - Offset >= Count)
        return;

    float3 CurrPosition = ParticlePosition_R[i];
    float3 CurrVelocity = ParticleVelocity_R[i];
    
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    float RelativeY = CurrPosition.y - Min.y;
    
    float3 RelativePoition = float3(RelativeXZ.x, RelativeY, RelativeXZ.y);
    
    //unzip cell morton code
    uint2 CurrGridXZIndex = RelativeXZ / CellLength;
    float CenterTerrianHeight = TerrianHeight_R[CurrGridXZIndex];
    float CenterTallCellHeight = TallCellHeight_R[CurrGridXZIndex];
    
    uint CurrGridYIndex = (RelativeY - CenterTerrianHeight - CenterTallCellHeight - CellLength) / CellLength;
    
    uint CurrRegularCellLinerIndex = computeMorton3D(uint3(CurrGridXZIndex.x, CurrGridYIndex, CurrGridXZIndex.y));
    uint PrevRegularCellLinerIndex = ThreadIdx == 0 ? 0 : WaveReadLaneAt(CurrRegularCellLinerIndex, CurrLaneIndex - 1);
    uint NextRegularCellLinerIndex = ThreadIdx == CurrLaneCount - 1 ? 0 : WaveReadLaneAt(CurrRegularCellLinerIndex, CurrLaneIndex + 1);
    
    //r: Lane31~Lane0, g: Lane63~Lane32...
    uint4 BallotResult1 = WaveActiveBallot(ThreadIdx == 0 || PrevRegularCellLinerIndex != CurrRegularCellLinerIndex);
    uint4 BallotResult2 = WaveActiveBallot(ThreadIdx == CurrLaneCount - 1 || NextRegularCellLinerIndex != CurrRegularCellLinerIndex);
    uint IntraOffset = doCLZHighToLow(MaskUnusedBit(BallotResult2, CurrLaneCount), CurrLaneIndex);
    uint InvIntraOffset = doCLZLowToHigh(MaskUnusedBit(BallotResult1, CurrLaneCount), CurrLaneIndex);
    uint RegionLength = InvIntraOffset + IntraOffset + 1;
    
    //warp level reduce
    for (int c = 0; c < 27; c++)
    {
        int2 AdjContributePointXZIndex = CurrGridXZIndex + OffsetVector3D[c].xz;
        if (any(AdjContributePointXZIndex < 0) || any(AdjContributePointXZIndex >= XZResolution))
            continue;
        
        float AdjTerrianHeight = TerrianHeight_R[AdjContributePointXZIndex];
        float AdjTallCellHeight = TallCellHeight_R[AdjContributePointXZIndex];
        
        float AdjContributePointHeight = (int) (RelativeY / CellLength) * CellLength + 0.5f * CellLength + OffsetVector3D[c].y * CellLength;
        if (AdjContributePointHeight <= AdjTerrianHeight + AdjTallCellHeight || AdjContributePointHeight > AdjTerrianHeight + AdjTallCellHeight + CellLength * ConstantCellNum)
            continue;
        
        float3 AdjContributePoint = float3(AdjContributePointXZIndex.x * CellLength + 0.5f * CellLength, AdjContributePointHeight, AdjContributePointXZIndex.y * CellLength + 0.5f * CellLength);
        float Weight = CubicKernel(length(RelativePoition - AdjContributePoint) / CellLength);
        float3 WeightVelocity = Weight * CurrVelocity;

        for (int k = 0; k < ceil(log2(RegionLength)); k++)
        {
            uint IntraEnd = floor((float) RegionLength / pow(2.0f, k + 1));
            uint ReductionFactor = ceil((float) RegionLength / pow(2.0f, k + 1));
            
            float AnotherWeight = WaveReadLaneAt(Weight, CurrLaneIndex + ReductionFactor);
            float3 AnotherWeightVelocity = WaveReadLaneAt(WeightVelocity, CurrLaneIndex + ReductionFactor);
            if (IntraOffset < IntraEnd)
            {
                Weight += AnotherWeight;
                WeightVelocity += AnotherWeightVelocity;
            }
        }
        
        if (IntraOffset == 0)
        {
            int AdjContributePointYIndex = (AdjContributePointHeight - AdjTerrianHeight - AdjTallCellHeight) / CellLength;
            int3 AdjContributePoint3DIndex = int3(AdjContributePointXZIndex.x, AdjContributePointYIndex, AdjContributePointXZIndex.y);
            InterlockedAdd(RegularCellWeight_RW[AdjContributePoint3DIndex], Weight * ZIP);
            InterlockedAdd(RegularCellWeightedVelocity_R_RW[AdjContributePoint3DIndex], WeightVelocity.x * ZIP);
            InterlockedAdd(RegularCellWeightedVelocity_G_RW[AdjContributePoint3DIndex], WeightVelocity.y * ZIP);
            InterlockedAdd(RegularCellWeightedVelocity_B_RW[AdjContributePoint3DIndex], WeightVelocity.z * ZIP);
        }
    }
}

[numthreads(THREAD_COUNT_3D, THREAD_COUNT_3D, THREAD_COUNT_3D)]
void scatterOnlyRegularParticleToGrid_Pass2(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xz >= XZResolution) || DispatchThreadID.y > ConstantCellNum)
        return;
    
    float Weight = RegularCellWeight_R[DispatchThreadID] / (float) ZIP;
    float3 WeightedVelocity = float3(
        RegularCellWeightedVelocity_R_R[DispatchThreadID] / (float) ZIP,
        RegularCellWeightedVelocity_G_R[DispatchThreadID] / (float) ZIP,
        RegularCellWeightedVelocity_B_R[DispatchThreadID] / (float) ZIP
    );
    
    float3 FinalValue = float3(0, 0, 0);
    if (abs(Weight - 0.0f) > EPSILON)
        FinalValue = WeightedVelocity / Weight;
    RegularCellVelocity_RW[DispatchThreadID] = FinalValue;
}

Texture2D<int> WaterSurfaceMin_R;
Texture2D<int> WaterSurfaceMax_R;
RWTexture2D<int> WaterSurfaceMin_RW;
RWTexture2D<int> WaterSurfaceMax_RW;
RWTexture2D<float2> WaterSurfaceH1H2_RW;
[numthreads(THREAD_COUNT_1D, 1, 1)]
void computeH1H2WithParticle_Pass1(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint CurrLaneIndex = WaveGetLaneIndex();
    uint CurrLaneCount = WaveGetLaneCount();
    uint CurrWarpIndex = ThreadIdx / CurrLaneCount;
    
    uint i = ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i >= ParticleIndirectArgment_R[ParticleCountArgumentOffset])
        return;
    
    float3 CurrPosition = ParticlePosition_R[i];
    
    float2 RelativeXZ = CurrPosition.xz - Min.xz;
    float RelativeY = CurrPosition.y - Min.y;
    float3 RelativePosition = float3(RelativeXZ.x, RelativeY, RelativeXZ.y);
    
    uint2 CurrGridXZIndex = RelativePosition.xz / CellLength;
    uint CurrGridYIndex = RelativePosition.y / CellLength;
    
    uint CurrTallCellLinerIndex = computeMorton2D((uint2) (RelativeXZ / CellLength));
    uint PrevTallCellLinerIndex = ThreadIdx == 0 ? 0 : WaveReadLaneAt(CurrTallCellLinerIndex, CurrLaneIndex - 1);
    uint NextTallCellLinerIndex = ThreadIdx == CurrLaneCount - 1 ? 0 : WaveReadLaneAt(CurrTallCellLinerIndex, CurrLaneIndex + 1);
    
    //r: Lane31~Lane0, g: Lane63~Lane32...
    uint4 BallotResult1 = WaveActiveBallot(ThreadIdx == 0 || PrevTallCellLinerIndex != CurrTallCellLinerIndex);
    uint4 BallotResult2 = WaveActiveBallot(ThreadIdx == CurrLaneCount - 1 || NextTallCellLinerIndex != CurrTallCellLinerIndex);
    uint IntraOffset = doCLZHighToLow(MaskUnusedBit(BallotResult2, CurrLaneCount), CurrLaneIndex);
    uint InvIntraOffset = doCLZLowToHigh(MaskUnusedBit(BallotResult1, CurrLaneCount), CurrLaneIndex);
    uint RegionLength = InvIntraOffset + IntraOffset + 1;
    
    //warp level reduce
    float CenterTerrianHeight = TerrianHeight_R[RelativeXZ];
    float CenterTallCellHeight = TallCellHeight_R[RelativeXZ];
    float MinY = RelativeY / (CenterTerrianHeight + CenterTallCellHeight + ConstantCellNum * CellLength);
    float MaxY = RelativeY / (CenterTerrianHeight + CenterTallCellHeight + ConstantCellNum * CellLength);
    
    for (int k = 0; k < ceil(log2(RegionLength)); k++)
    {
        uint IntraEnd = floor((float) RegionLength / pow(2.0f, k + 1));
        uint Offset = ceil((float) RegionLength / pow(2.0f, k + 1));
            
        int AnotherMinY = WaveReadLaneAt(MinY, CurrLaneIndex + Offset);
        int AnotherMaxY = WaveReadLaneAt(MaxY, CurrLaneIndex + Offset);
        if (IntraOffset < IntraEnd)
        {
            MinY = min(AnotherMinY, MinY);
            MaxY = min(AnotherMaxY, MaxY);
        }
    }
        
    if (IntraOffset == 0)
    {
        InterlockedMin(WaterSurfaceMin_RW[CurrGridXZIndex], MinY * ZIP);
        InterlockedMax(WaterSurfaceMax_RW[CurrGridXZIndex], MaxY * ZIP);
    }
}

[numthreads(THREAD_COUNT_2D, THREAD_COUNT_2D, 1)]
void computeH1H2WithParticle_Pass2(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xy >= XZResolution))
        return;
    
    float CenterTerrianHeight = TerrianHeight_R[DispatchThreadID.xy];
    float CenterTallCellHeight = TallCellHeight_R[DispatchThreadID.xy];
    
    float MinY = (WaterSurfaceMin_R[DispatchThreadID.xy] / (float) ZIP) * (CenterTerrianHeight + CenterTallCellHeight + ConstantCellNum * CellLength);
    float MaxY = (WaterSurfaceMax_R[DispatchThreadID.xy] / (float) ZIP) * (CenterTerrianHeight + CenterTallCellHeight + ConstantCellNum * CellLength);
    
    WaterSurfaceH1H2_RW[DispatchThreadID.xy].x = MinY;
    WaterSurfaceH1H2_RW[DispatchThreadID.xy].y = MaxY;
}