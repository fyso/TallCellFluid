#include "Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel insertParticleIntoHashGrid
#pragma kernel countingSortFull

#pragma multi_compile_local __ HashTallCell HashRegularCell

uint ParticleCountArgumentOffset;
uint DifferParticleSplitPointArgumentOffset;
uint DifferParticleCountArgumentOffset;

float3 HashGridMin;
float HashGridCellLength;
int TargetParticleType;


#if HashRegularCell || HashTallCell
Texture2D<float> TerrianHeight_R;
Texture2D<float> TallCellHeight_R;
#endif

StructuredBuffer<uint> ParticleIndirectArgment_R;

StructuredBuffer<float3> ParticlePosition_R;
StructuredBuffer<float3> ParticleVelocity_R;
StructuredBuffer<uint> ParticleFilter_R;

RWStructuredBuffer<float3> SortedParticlePosition_RW;
RWStructuredBuffer<float3> SortedParticleVelocity_RW;
RWStructuredBuffer<uint> SortedParticleFilter_RW;

StructuredBuffer<uint> ParticleInnerSortIndex_R;
RWStructuredBuffer<uint> ParticleInnerSortIndex_RW;

StructuredBuffer<uint> ParticleCellIndex_R;
RWStructuredBuffer<uint> ParticleCellIndex_RW;

StructuredBuffer<uint> HashGridCellParticleOffset_R;
RWStructuredBuffer<uint> HashGridCellParticleCount_RW;

[numthreads(THREAD_COUNT_1D, 1, 1)]
void insertParticleIntoHashGrid(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint TargetParticleOffset = 0;
    uint TargetParticleCount = ParticleIndirectArgment_R[ParticleCountArgumentOffset];
    if (TargetParticleType >= 0)
    {
        TargetParticleOffset = TargetParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + TargetParticleType - 1];
        TargetParticleCount = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + TargetParticleType];
    }
    
    uint i = TargetParticleOffset + ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i >= TargetParticleOffset + TargetParticleCount)
        return;
    
#if HashTallCell
    float3 Postion = ParticlePosition_R[i];
    uint2 CellXZIndex = uint2((Postion.xz - HashGridMin.xz) / HashGridCellLength);
    uint CellLinerIndex = computeMorton2D(CellXZIndex);
    
    //float CurrTerrianHeight = TerrianHeight_R[CellXZIndex];
    //float CurrTallCellHeight = TallCellHeight_R[CellXZIndex];
    //uint CellYIndex = (Postion.y - CurrTerrianHeight) / HashGridCellLength;
    //uint3 Cell3DIndex = uint3(CellXZIndex.x, CellYIndex, CellXZIndex.y);
    //uint CellLinerIndex = computeMorton3D(CellXZIndex);
    
#elif HashRegularCell
    float3 CurrPosition = ParticlePosition_R[i];
    float2 RelativeXZ = CurrPosition.xz - HashGridMin.xz;
    uint2 CurrGridXZIndex = RelativeXZ / HashGridCellLength;
    float CurrTerrianHeight = TerrianHeight_R[CurrGridXZIndex];
    float CurrTallCellHeight = TallCellHeight_R[CurrGridXZIndex];
    uint CurrGridYIndex = (CurrPosition.y - CurrTerrianHeight - CurrTallCellHeight) / HashGridCellLength;
    uint3 Cell3DIndex = uint3(CurrGridXZIndex.x, CurrGridYIndex, CurrGridXZIndex.y);
    uint CellLinerIndex = computeMorton3D(Cell3DIndex);
#else
    float3 Postion = ParticlePosition_R[i];
    uint3 Cell3DIndex = uint3((Postion - HashGridMin) / HashGridCellLength);
    uint CellLinerIndex = computeMorton3D(Cell3DIndex);
#endif
    
    ParticleCellIndex_RW[i] = CellLinerIndex;
    uint OriginValue;
    InterlockedAdd(HashGridCellParticleCount_RW[CellLinerIndex], 1, OriginValue);
    ParticleInnerSortIndex_RW[i] = OriginValue;
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void countingSortFull(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_COUNT_1D;
    if (i >= ParticleIndirectArgment_R[ParticleCountArgumentOffset])
        return;
    
    uint CellLinerIndex = ParticleCellIndex_R[i];
    uint Offset = HashGridCellParticleOffset_R[CellLinerIndex];
    uint Index = ParticleInnerSortIndex_R[i];
    
    uint TargetParticleOffset = TargetParticleType == 0 ? 0 : ParticleIndirectArgment_R[DifferParticleSplitPointArgumentOffset + TargetParticleType - 1];
    uint TargetParticleCount = ParticleIndirectArgment_R[DifferParticleCountArgumentOffset + TargetParticleType];
    uint SortedIndex = TargetParticleOffset + Offset + Index;
    if(TargetParticleType == -1)
    {
        SortedIndex = Offset + Index;
    }
    else
    {
        if (i < TargetParticleOffset || i >= TargetParticleOffset + TargetParticleCount)
            SortedIndex = i;
    }
    SortedParticlePosition_RW[SortedIndex] = ParticlePosition_R[i];
    SortedParticleVelocity_RW[SortedIndex] = ParticleVelocity_R[i];
    SortedParticleFilter_RW[SortedIndex] = ParticleFilter_R[i];
}