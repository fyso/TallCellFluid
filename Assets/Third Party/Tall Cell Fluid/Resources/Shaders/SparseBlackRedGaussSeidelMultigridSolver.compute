#include "Common.hlsl"
#pragma kernel computeVectorB
#pragma kernel smooth
#pragma kernel restrict
#pragma kernel prolong

uint BlackRedSwitch;

RWTexture3D<float> VectorB_RW;
RWTexture3D<float> VectorB_R;
[numthreads(THREAD_COUNT_1D, 1, 1)]
void computeVectorB(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void smooth(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void restrict(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void prolong(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    
}