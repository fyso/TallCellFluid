#include "Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel computeVectorB
#pragma kernel applyNopressureForce
#pragma kernel smooth
#pragma kernel restrict
#pragma kernel prolong
#pragma kernel updateVelocity

float Gravity;

Texture2D<float> TerrianHeight_R;
Texture2D<float> TallCellHeight_R;

Texture3D<float> RegularCellRigidBodyPercentage_R;
Texture2D<float> TopCellRigidBodyPercentage_R;
Texture2D<float> BottomRigidBodyPercentage_R;

Texture3D<float3> RegularCellRigidBodyVelocity_R;
Texture2D<float3> TopCellRigidBodyVelocity_R;
Texture2D<float3> BottomRigidBodyVelocity_R;

Texture3D<float3> RegularCellVelocity_R;
Texture2D<float3> TopCellVelocity_R;
Texture2D<float3> BottomCellVelocity_R;
RWTexture3D<float3> RegularCellVelocity_RW;
RWTexture2D<float3> TopCellVelocity_RW;
RWTexture2D<float3> BottomCellVelocity_RW;

Texture3D<float> RegularCellPressure_R;
Texture2D<float> TopCellPressure_R;
Texture2D<float> BottomCellPressure_R;
RWTexture3D<float> RegularCellPressure_RW;
RWTexture2D<float> TopCellPressure_RW;
RWTexture2D<float> BottomCellPressure_RW;

Texture3D<float> RegularCellPressure_Cache_R;
Texture2D<float> TopCellPressure_Cache_R;
Texture2D<float> BottomCellPressure_Cache_R;
RWTexture3D<float> RegularCellPressure_Cache_RW;
RWTexture2D<float> TopCellPressure_Cache_RW;
RWTexture2D<float> BottomCellPressure_Cache_RW;

Texture3D<int> RegularCellMark_R;

RWTexture3D<float> VectorB_RW;
Texture3D<float> VectorB_R;

float3 sampleTallCellGridVelocity(float3 vCenterPosition, float3 vOffset, float3 CenterValue)
{
    float3 Position = vCenterPosition + vOffset;
    int2 XZ = clamp(Position.xz / CellLength, int2(0, 0), XZResolution - int2(1, 1));
    
    float TerrianHeight = TerrianHeight_R[XZ];
    float TallCellHeight = TallCellHeight_R[XZ];
    
    Position.y += (TerrianHeight + TallCellHeight);
    
    float3 Velocity = float3(0, 0, 0);
    if (Position.y >= TerrianHeight && Position.y < TerrianHeight + TallCellHeight)
    {
        float SolidFacctor = sampleTallCellValue(TopCellRigidBodyPercentage_R, BottomRigidBodyPercentage_R, TerrianHeight, TallCellHeight, XZ, Position.y);
        if(SolidFacctor > 0.9f)
            Velocity = sampleTallCellValue(TopCellRigidBodyVelocity_R, BottomRigidBodyVelocity_R, TerrianHeight, TallCellHeight, XZ, Position.y);
        else
            Velocity = (sampleTallCellValue(TopCellVelocity_R, BottomCellVelocity_R, TerrianHeight, TallCellHeight, XZ, Position.y) + CenterValue) * 0.5f;
    }
    else if (Position.y >= TerrianHeight + TallCellHeight && Position.y < TerrianHeight + TallCellHeight + ConstantCellNum * CellLength)
    {
        int Y = (Position.y - (TerrianHeight + TallCellHeight)) / CellLength;
        float SolidFacctor = RegularCellRigidBodyPercentage_R[int3(XZ.x, Y, XZ.y)];
        if (SolidFacctor > 0.9f)
            Velocity = RegularCellRigidBodyVelocity_R[int3(XZ.x, Y, XZ.y)];
        else
            Velocity = (RegularCellVelocity_R[int3(XZ.x, Y, XZ.y)] + CenterValue) * 0.5f;
    }
    else if (Position.y >= TerrianHeight + TallCellHeight + ConstantCellNum * CellLength)
    {
        Velocity = CenterValue;
    }
    else
    {
        Velocity = float3(0, 0, 0);
    }
    return Velocity;
}

float3 sampleAdjPressureEffect(float3 vCenterPosition, float3 vOffset, float CenterPressure)
{
    float3 Position = vCenterPosition + vOffset;
    int2 XZ = clamp(Position.xz / CellLength, int2(0, 0), XZResolution - int2(1, 1));
    
    float TerrianHeight = TerrianHeight_R[XZ];
    float TallCellHeight = TallCellHeight_R[XZ];
    
    float Pressure = 0.0f;
    if (Position.y >= TerrianHeight && Position.y < TerrianHeight + TallCellHeight)
    {
        float SolidFacctor = sampleTallCellValue(TopCellRigidBodyPercentage_R, BottomRigidBodyPercentage_R, TerrianHeight, TallCellHeight, XZ, Position.y);
        float AdjPressure = sampleTallCellValue(TopCellPressure_R, BottomCellPressure_R, TerrianHeight, TallCellHeight, XZ, Position.y);
        Pressure = SolidFacctor * CenterPressure + (1 - SolidFacctor) * AdjPressure;
    }
    else if (Position.y >= TerrianHeight + TallCellHeight && Position.y < TerrianHeight + TallCellHeight + ConstantCellNum * CellLength)
    {
        int Y = (Position.y - (TerrianHeight + TallCellHeight)) / CellLength;
        float SolidFacctor = RegularCellRigidBodyPercentage_R[int3(XZ.x, Y, XZ.y)];
        float AdjPressure = RegularCellPressure_R[int3(XZ.x, Y, XZ.y)];
        float Mark = RegularCellMark_R[int3(XZ.x, Y, XZ.y)];
        
        if(Mark == 1)
            Pressure = SolidFacctor * CenterPressure + (1 - SolidFacctor) * AdjPressure;
        else
            Pressure = 0.0f;

    }
    else
    {
        Pressure = CenterPressure;
    }
    return Pressure;
}

float getSolidFactor(uint3 DispatchThreadID)
{
    float SolidFactor = 0.0f;
    if (DispatchThreadID.y == 0)
        SolidFactor = BottomRigidBodyPercentage_R[DispatchThreadID.xz];
    else if (DispatchThreadID.y == 1)
        SolidFactor = TopCellRigidBodyPercentage_R[DispatchThreadID.xz];
    else
        SolidFactor = RegularCellRigidBodyPercentage_R[DispatchThreadID - uint3(0, 2, 0)];
    return SolidFactor;
}

float3 getCurrCellPosition(uint3 DispatchThreadID, float TerrianHeight, float TallCellHeight)
{
    if (DispatchThreadID.y == 0)
    {
        float2 XZ = DispatchThreadID.xz * CellLength + float2(0.5f, 0.5f) * CellLength;
        return float3(XZ.x, TerrianHeight + 0.5f * CellLength, XZ.y);
    }
    else if (DispatchThreadID.y == 1)
    {
        float2 XZ = DispatchThreadID.xz * CellLength + float2(0.5f, 0.5f) * CellLength;
        return float3(XZ.x, TerrianHeight + TallCellHeight - 0.5f * CellLength, XZ.y);
    }
    else
    {
        uint3 Index3D = DispatchThreadID - uint3(0, 2, 0);
        return TerrianHeight + TallCellHeight + Index3D * CellLength + float3(0.5f, 0.5f, 0.5f) * CellLength;
    }
}

float3 getCurrCellVelocity(uint3 DispatchThreadID)
{
    if (DispatchThreadID.y == 0)
    {
        return BottomCellVelocity_R[DispatchThreadID.xz];
    }
    else if (DispatchThreadID.y == 1)
    {
        return TopCellVelocity_R[DispatchThreadID.xz];
    }
    else
    {
        uint3 Index3D = DispatchThreadID - uint3(0, 2, 0);
        return RegularCellVelocity_R[Index3D];
    }
}

float getCurrCellPressure(uint3 DispatchThreadID)
{
    if (DispatchThreadID.y == 0)
    {
        return BottomCellPressure_R[DispatchThreadID.xz];
    }
    else if (DispatchThreadID.y == 1)
    {
        return TopCellPressure_R[DispatchThreadID.xz];
    }
    else
    {
        uint3 Index3D = DispatchThreadID - uint3(0, 2, 0);
        return RegularCellPressure_R[Index3D];
    }
}

[numthreads(THREAD_COUNT_3D, THREAD_COUNT_3D, THREAD_COUNT_3D)]
void computeVectorB(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xz >= XZResolution) || DispatchThreadID.y >= ConstantCellNum + 2 || (DispatchThreadID.y > 1 && RegularCellMark_R[DispatchThreadID - uint3(0, 2, 0)] == 0))
    {
        VectorB_RW[DispatchThreadID] = 0;
        return;
    }
    
    if (getSolidFactor(DispatchThreadID) > 0.9f)
        return;
    
    float TerrianHeight = TerrianHeight_R[DispatchThreadID.xz];
    float TallCellHeight = TallCellHeight_R[DispatchThreadID.xz];
    
    float3 CenterVelocity = getCurrCellVelocity(DispatchThreadID);
    float3 CenterCellPosition = getCurrCellPosition(DispatchThreadID, TerrianHeight, TallCellHeight);
    
    float3 LeftVelocity = sampleTallCellGridVelocity(CenterCellPosition, int3(-1, 0, 0) * CellLength, CenterVelocity);
    float3 RightVelocity = sampleTallCellGridVelocity(CenterCellPosition, int3(1, 0, 0) * CellLength, CenterVelocity);
    float3 DownVelocity = sampleTallCellGridVelocity(CenterCellPosition, int3(0, -1, 0) * CellLength, CenterVelocity);
    float3 UpVelocity = sampleTallCellGridVelocity(CenterCellPosition, int3(0, 1, 0) * CellLength, CenterVelocity);
    float3 BackVelocity = sampleTallCellGridVelocity(CenterCellPosition, int3(0, 0, -1) * CellLength, CenterVelocity);
    float3 FrontVelocity = sampleTallCellGridVelocity(CenterCellPosition, int3(0, 0, 1) * CellLength, CenterVelocity);

    VectorB_RW[DispatchThreadID] = Density0 * ((RightVelocity.x - LeftVelocity.x) + (UpVelocity.y - DownVelocity.y) + (FrontVelocity.z - BackVelocity.z)) / CellLength / TimeStep;
}

[numthreads(THREAD_COUNT_3D, THREAD_COUNT_3D, THREAD_COUNT_3D)]
void applyNopressureForce(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xz >= XZResolution) || DispatchThreadID.y >= ConstantCellNum + 2 || (DispatchThreadID.y > 1 && RegularCellMark_R[DispatchThreadID - uint3(0, 2, 0)] == 0))
        return;
    
    if (getSolidFactor(DispatchThreadID) > 0.9f)
        return;
    
    uint3 Index3D = DispatchThreadID - uint3(0, 2, 0);
    if (DispatchThreadID.y == 0)
        BottomCellVelocity_RW[DispatchThreadID.xz] += float3(0.0f, -Gravity * TimeStep, 0.0f);
    else if (DispatchThreadID.y == 1)
        TopCellVelocity_RW[DispatchThreadID.xz] += float3(0.0f, -Gravity * TimeStep, 0.0f);
    else
        RegularCellVelocity_RW[Index3D] += float3(0.0f, -Gravity * TimeStep, 0.0f);
}

[numthreads(THREAD_COUNT_3D, THREAD_COUNT_3D, THREAD_COUNT_3D)]
void smooth(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    DispatchThreadID = DispatchThreadID;
    if (any(DispatchThreadID.xz >= XZResolution) || DispatchThreadID.y >= ConstantCellNum + 2 || (DispatchThreadID.y > 1 && RegularCellMark_R[DispatchThreadID - uint3(0, 2, 0)] == 0))
        return;
    
    float TerrianHeight = TerrianHeight_R[DispatchThreadID.xz];
    float TallCellHeight = TallCellHeight_R[DispatchThreadID.xz];
    float CenterCellPressure = getCurrCellPressure(DispatchThreadID);
    float3 CenterCellPosition = getCurrCellPosition(DispatchThreadID, TerrianHeight, TallCellHeight);
    
    float CurrB = VectorB_R[DispatchThreadID];
    
    float LeftPressure = sampleAdjPressureEffect(CenterCellPosition, int3(-1, 0, 0) * CellLength, CenterCellPressure);
    float RightPressure = sampleAdjPressureEffect(CenterCellPosition, int3(1, 0, 0) * CellLength, CenterCellPressure);
    float DownPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, -1, 0) * CellLength, CenterCellPressure);
    float UpPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, 1, 0) * CellLength, CenterCellPressure);
    float BackPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, 0, -1) * CellLength, CenterCellPressure);
    float FrontPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, 0, 1) * CellLength, CenterCellPressure);
    
    float SmoothedPressure = ((LeftPressure + RightPressure + DownPressure + UpPressure + BackPressure + FrontPressure) - CurrB * pow(CellLength, 2.0f)) / 6.0f;
    
    uint3 Index3D = DispatchThreadID - uint3(0, 2, 0);
    if (DispatchThreadID.y == 0)
        BottomCellPressure_Cache_RW[DispatchThreadID.xz] = SmoothedPressure;
    else if (DispatchThreadID.y == 1)
        TopCellPressure_Cache_RW[DispatchThreadID.xz] = SmoothedPressure;
    else
        RegularCellPressure_Cache_RW[Index3D] = SmoothedPressure;
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void restrict(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    
}

[numthreads(THREAD_COUNT_1D, 1, 1)]
void prolong(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    
}

[numthreads(THREAD_COUNT_3D, THREAD_COUNT_3D, THREAD_COUNT_3D)]
void updateVelocity(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    DispatchThreadID = DispatchThreadID;
    if (any(DispatchThreadID.xz >= XZResolution) || DispatchThreadID.y >= ConstantCellNum + 2 || (DispatchThreadID.y > 1 && RegularCellMark_R[DispatchThreadID - uint3(0, 2, 0)] == 0))
        return;
    
    float TerrianHeight = TerrianHeight_R[DispatchThreadID.xz];
    float TallCellHeight = TallCellHeight_R[DispatchThreadID.xz];
    float CenterCellPressure = getCurrCellPressure(DispatchThreadID);
    float3 CenterCellPosition = getCurrCellPosition(DispatchThreadID, TerrianHeight, TallCellHeight);
    
    float LeftPressure = sampleAdjPressureEffect(CenterCellPosition, int3(-1, 0, 0) * CellLength, CenterCellPressure);
    float RightPressure = sampleAdjPressureEffect(CenterCellPosition, int3(1, 0, 0) * CellLength, CenterCellPressure);
    float DownPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, -1, 0) * CellLength, CenterCellPressure);
    float UpPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, 1, 0) * CellLength, CenterCellPressure);
    float BackPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, 0, -1) * CellLength, CenterCellPressure);
    float FrontPressure = sampleAdjPressureEffect(CenterCellPosition, int3(0, 0, 1) * CellLength, CenterCellPressure);
    float3 CorrectVector = (float3(RightPressure - LeftPressure, UpPressure - DownPressure, FrontPressure - BackPressure) / CellLength) * TimeStep / Density0;
    
    uint3 Index3D = DispatchThreadID - uint3(0, 2, 0);
    if (DispatchThreadID.y == 0)
        BottomCellVelocity_RW[DispatchThreadID.xz] -= CorrectVector;
    else if (DispatchThreadID.y == 1)
        TopCellVelocity_RW[DispatchThreadID.xz] -= CorrectVector;
    else
        RegularCellVelocity_RW[Index3D] -= CorrectVector;
}