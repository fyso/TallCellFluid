#pragma kernel downSampleHeight
#pragma kernel downSampleRegularCell
#pragma kernel downSampleTallCell
#pragma enable_d3d11_debug_symbols

float min4To1(float x1, float x2, float x3, float x4)
{
    return min(x1, min(x2, min(x3, x4)));
}

float max4To1(float x1, float x2, float x3, float x4)
{
    return max(x1, max(x2, max(x3, x4)));
}

uint NumMipLevels;
Texture2D<float> SrcTall;
Texture2D<float> SrcTerrain;

groupshared float gs_Terrain[64];
groupshared float gs_Tall[64];

RWTexture2D<float> OutTerrainMip1;
RWTexture2D<float> OutTerrainMip2;
RWTexture2D<float> OutTerrainMip3;
RWTexture2D<float> OutTerrainMip4;
RWTexture2D<float> OutTallMip1;
RWTexture2D<float> OutTallMip2;
RWTexture2D<float> OutTallMip3;
RWTexture2D<float> OutTallMip4;

float SrcCellLength;
[numthreads(8, 8, 1)]
void downSampleHeight(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadID : SV_DispatchThreadID)
{
    float Terrain1, Terrain2, Terrain3, Terrain4;
    Terrain1 = SrcTerrain[DispatchThreadID.xy * 2];
    Terrain2 = SrcTerrain[DispatchThreadID.xy * 2 + uint2(1, 0)];
    Terrain3 = SrcTerrain[DispatchThreadID.xy * 2 + uint2(0, 1)];
    Terrain4 = SrcTerrain[DispatchThreadID.xy * 2 + uint2(1, 1)];
    float Src1 = max4To1(
        SrcTall[DispatchThreadID.xy * 2] + Terrain1,
        SrcTall[DispatchThreadID.xy * 2 + uint2(1, 0)] + Terrain2,
        SrcTall[DispatchThreadID.xy * 2 + uint2(0, 1)] + Terrain3,
        SrcTall[DispatchThreadID.xy * 2 + uint2(1, 1)] + Terrain4);
    float NextLevelTerrain = min4To1(Terrain1, Terrain2, Terrain3, Terrain4);
    float NextCellLength = SrcCellLength * 2;
    NextLevelTerrain = floor(NextLevelTerrain / NextCellLength) * NextCellLength;
    OutTerrainMip1[DispatchThreadID.xy] = NextLevelTerrain;
    
    float NextTallCellHeight = max(ceil((Src1 - NextLevelTerrain) / NextCellLength), 2) * NextCellLength;
    OutTallMip1[DispatchThreadID.xy] = NextTallCellHeight;
    if (NumMipLevels > 1)
    {
        Src1 = NextTallCellHeight + NextLevelTerrain;
        gs_Terrain[GroupIndex] = NextLevelTerrain;        
        gs_Tall[GroupIndex] = Src1;
    }
    else return;
    GroupMemoryBarrierWithGroupSync();
    
    if ((GroupIndex & 0x9) == 0)
    {
        Src1 = max4To1(Src1, gs_Tall[GroupIndex + 0x01], gs_Tall[GroupIndex + 0x08], gs_Tall[GroupIndex + 0x09]);
        NextLevelTerrain = min4To1(NextLevelTerrain, gs_Terrain[GroupIndex + 0x01], gs_Terrain[GroupIndex + 0x08], gs_Terrain[GroupIndex + 0x09]);
        NextCellLength *= 2;
        NextLevelTerrain = floor(NextLevelTerrain / NextCellLength) * NextCellLength;
        OutTerrainMip2[DispatchThreadID.xy >> 1] = NextLevelTerrain;

        NextTallCellHeight = max(ceil((Src1 - NextLevelTerrain) / NextCellLength), 2) * NextCellLength;
        OutTallMip2[DispatchThreadID.xy >> 1] = NextTallCellHeight;
    }
    if (NumMipLevels > 2)
    {
        Src1 = NextTallCellHeight + NextLevelTerrain;
        gs_Terrain[GroupIndex] = NextLevelTerrain;
        gs_Tall[GroupIndex] = Src1;
    }
    else return;
    GroupMemoryBarrierWithGroupSync();
    
    if ((GroupIndex & 0x1B) == 0)
    {
        Src1 = max4To1(Src1, gs_Tall[GroupIndex + 0x02], gs_Tall[GroupIndex + 0x10], gs_Tall[GroupIndex + 0x12]);
        NextLevelTerrain = min4To1(NextLevelTerrain, gs_Terrain[GroupIndex + 0x02], gs_Terrain[GroupIndex + 0x10], gs_Terrain[GroupIndex + 0x12]);
        NextCellLength *= 2;
        NextLevelTerrain = floor(NextLevelTerrain / NextCellLength) * NextCellLength;
        OutTerrainMip3[DispatchThreadID.xy >> 2] = NextLevelTerrain;

        NextTallCellHeight = max(ceil((Src1 - NextLevelTerrain) / NextCellLength), 2) * NextCellLength;
        OutTallMip3[DispatchThreadID.xy >> 2] = NextTallCellHeight;
    }
    if (NumMipLevels > 3)
    {
        Src1 = NextTallCellHeight + NextLevelTerrain;
        gs_Terrain[GroupIndex] = NextLevelTerrain;        
        gs_Tall[GroupIndex] = Src1;
    }
    else return;
    GroupMemoryBarrierWithGroupSync();
    
    if (GroupIndex == 0)
    {
        Src1 = max4To1(Src1, gs_Tall[GroupIndex + 0x04], gs_Tall[GroupIndex + 0x20], gs_Tall[GroupIndex + 0x24]);
        NextLevelTerrain = min4To1(NextLevelTerrain, gs_Terrain[GroupIndex + 0x04], gs_Terrain[GroupIndex + 0x20], gs_Terrain[GroupIndex + 0x24]);
        NextCellLength *= 2;
        NextLevelTerrain = floor(NextLevelTerrain / NextCellLength) * NextCellLength;
        OutTerrainMip4[DispatchThreadID.xy >> 3] = NextLevelTerrain;

        NextTallCellHeight = max(ceil((Src1 - NextLevelTerrain) / NextCellLength), 2) * NextCellLength;
        OutTallMip4[DispatchThreadID.xy >> 3] = NextTallCellHeight;
    }
}

#include "Common.hlsl"
Texture2D<float> NextLevelTerrainHeight;
Texture2D<float> NextLevelTallCellHeight;
Texture2D<float> TerrainHeight;
Texture2D<float> TallCellHeight;
Texture3D<float> SrcRegularCellRigidBodyPercentage;
Texture3D<int> SrcRegularMark; //TODO: air is 0, water is 1
float SrcRegularCellLength;
int SaveMoreAir;
uint3 OutResolution;
RWTexture3D<float> OutRegularCellRigidBodyPercentage;
RWTexture3D<int> OutRegularMark;
[numthreads(4, 4, 4)]
void downSampleRegularCell(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xyz >= OutResolution))
        return;
    
    float NextLevelHeight = NextLevelTallCellHeight[DispatchThreadID.xz] + NextLevelTerrainHeight[DispatchThreadID.xz] + 0.0001 * SrcRegularCellLength;
    uint2 TallCallIndex = DispatchThreadID.xz << 1;
    uint3 Index[8] = { uint3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0), uint3(0, 0, 0) };
    Index[0] = uint3(TallCallIndex.x, 0, TallCallIndex.y);
    Index[1] = uint3(TallCallIndex.x + 1, 0, TallCallIndex.y);
    Index[2] = uint3(TallCallIndex.x, 0, TallCallIndex.y + 1);
    Index[3] = uint3(TallCallIndex.x + 1, 0, TallCallIndex.y + 1);
    for (uint i = 0; i < 4; i++)
    {
        Index[i].y = (NextLevelHeight - TallCellHeight[Index[i].xz] - TerrainHeight[Index[i].xz]) / SrcRegularCellLength + (DispatchThreadID.y << 1);
        Index[i + 4] = Index[i];
        Index[i + 4].y += 1;
    }
    
    float3 VelocityResult = 0;
    float RigidBodyPercentageResult = 0;
    int CellNumWithFluid = 0;
    int CellNum = 0;
    for (uint k = 0; k < 8; k++)
    {
        if (Index[k].y < OutResolution.y * 2)
        {
            if (SrcRegularMark[Index[k]] == 1)
            {
                CellNumWithFluid++;
            }
            RigidBodyPercentageResult += SrcRegularCellRigidBodyPercentage[Index[k]];
            CellNum++;
        }
    }
    OutRegularCellRigidBodyPercentage[DispatchThreadID] = CellNum == 0 ? 0 : RigidBodyPercentageResult / CellNum;
    OutRegularMark[DispatchThreadID] = SaveMoreAir ? (CellNum && CellNumWithFluid == CellNum) : CellNumWithFluid != 0;
}

Texture2D<float3> SrcTallCellTop;
Texture2D<float3> SrcTallCellBottom;
RWTexture2D<float3> OutTallCellTop;
RWTexture2D<float3> OutTallCellBottom;
[numthreads(8, 8, 1)]
void downSampleTallCell(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    if (any(DispatchThreadID.xy >= OutResolution.xz))
        return;
    
    float Sumx = 0;
    float Sumx2 = 0;
    float3 Sumy = float3(0, 0, 0);
    float3 Sumxy = float3(0, 0, 0);
    uint m = 8;
    
    uint2 TallCallIndex = DispatchThreadID.xy << 1;
    uint2 offset[4] = { uint2(0, 0), uint2(1, 0), uint2(0, 1), uint2(1, 1) };
    float NextLevelTerrain = NextLevelTerrainHeight[DispatchThreadID.xy];
    float NextLevelHeight = NextLevelTallCellHeight[DispatchThreadID.xy] + NextLevelTerrain;
    for (uint i = 0; i < 4; i++)
    {
        uint2 Index = TallCallIndex + offset[i];
        float Terrain = TerrainHeight[Index];
        float TallCellTotalHeight = TallCellHeight[Index] + Terrain;
        float TopHeight = TallCellTotalHeight - 0.5 * SrcRegularCellLength;
        float BottomHeight = Terrain + 0.5 * SrcRegularCellLength;
        
        Sumx += TopHeight + BottomHeight;
        Sumx2 += TopHeight * TopHeight + BottomHeight * BottomHeight;
        Sumy += SrcTallCellTop[Index] + SrcTallCellBottom[Index];
        Sumxy += TopHeight * SrcTallCellTop[Index] + BottomHeight * SrcTallCellBottom[Index];
        
        float RegularCellYCount = (NextLevelHeight + 0.0001 * SrcRegularCellLength - TallCellTotalHeight) / SrcRegularCellLength;
        for (uint k = 0; k < min(RegularCellYCount, OutResolution.y * 2); k++)
        {
            float RegularCellHeight = TopHeight + (k + 1) * SrcRegularCellLength;
            uint3 RegularIndex = uint3(Index.x, k, Index.y);
            float RigidBodyPercentage = SrcRegularCellRigidBodyPercentage[RegularIndex];
            Sumy += RigidBodyPercentage;
            Sumxy += RegularCellHeight * RigidBodyPercentage;
            Sumx += RegularCellHeight;
            Sumx2 += RegularCellHeight * RegularCellHeight;
            m++;            
        }
    }
    
    float3 theta0 = Sumx2 * Sumy - Sumx * Sumxy;
    float3 theta1 = m * Sumxy - Sumx * Sumy;
    float theta2 = m * Sumx2 - Sumx * Sumx;
    
    float NextLevelTopHeight = NextLevelHeight - SrcRegularCellLength;
    float NextLevelBottomHeight = NextLevelTerrain + SrcRegularCellLength;

    OutTallCellTop[DispatchThreadID.xy] = (theta1 * NextLevelTopHeight + theta0) / theta2;
    OutTallCellBottom[DispatchThreadID.xy] = (theta1 * NextLevelBottomHeight + theta0) / theta2;
}