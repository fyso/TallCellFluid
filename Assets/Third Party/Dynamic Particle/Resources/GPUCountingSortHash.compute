#include "Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel insertParticleIntoHashGrid
#pragma kernel countingSortFull

float3 HashGridMin;
float HashGridCellLength;

StructuredBuffer<uint> ParticleIndrectArgment_R;

StructuredBuffer<float3> ParticlePosition_R;
StructuredBuffer<float3> ParticleVelocity_R;
StructuredBuffer<uint> ParticleFilter_R;

RWStructuredBuffer<float3> SortedParticlePosition_RW;
RWStructuredBuffer<float3> SortedParticleVelocity_RW;
RWStructuredBuffer<uint> SortedParticleFilter_RW;

StructuredBuffer<uint> ParticleInnerSortIndex_R;
RWStructuredBuffer<uint> ParticleInnerSortIndex_RW;

StructuredBuffer<uint> ParticleCellIndex_R;
RWStructuredBuffer<uint> ParticleCellIndex_RW;

StructuredBuffer<uint> HashGridCellParticleOffset_R;
RWStructuredBuffer<uint> HashGridCellParticleCount_RW;

[numthreads(THREAD_NUM_1D, 1, 1)]
void insertParticleIntoHashGrid(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_NUM_1D;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
    
    float3 Postion = ParticlePosition_R[i];
    uint3 Cell3DIndex = uint3((Postion - HashGridMin) / HashGridCellLength);
    uint CellLinerIndex = computeMorton3D(Cell3DIndex);
    
    ParticleCellIndex_RW[i] = CellLinerIndex;
    uint OriginValue;
    InterlockedAdd(HashGridCellParticleCount_RW[CellLinerIndex], 1, OriginValue);
    ParticleInnerSortIndex_RW[i] = OriginValue;
}

[numthreads(THREAD_NUM_1D, 1, 1)]
void countingSortFull(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_NUM_1D;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
    
    uint CellLinerIndex = ParticleCellIndex_R[i];
    uint Offset = HashGridCellParticleOffset_R[CellLinerIndex];
    uint Index = ParticleInnerSortIndex_R[i];
    uint SortedIndex = Offset + Index;
    SortedParticlePosition_RW[SortedIndex] = ParticlePosition_R[i];
    SortedParticleVelocity_RW[SortedIndex] = ParticleVelocity_R[i];
    SortedParticleFilter_RW[SortedIndex] = ParticleFilter_R[i];
}