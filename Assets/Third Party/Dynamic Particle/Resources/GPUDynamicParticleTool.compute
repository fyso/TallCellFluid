#include "Common.hlsl"

#pragma enable_d3d11_debug_symbols
#pragma kernel addParticleBlock
#pragma kernel updateParticleCountArgment
#pragma kernel scatterParticleData
#pragma kernel updateArgment
#pragma kernel deleteParticleOutofRange
#pragma kernel rearrangeParticle

StructuredBuffer<uint> ParticleIndrectArgment_R;
RWStructuredBuffer<uint> ParticleIndrectArgment_RW;

StructuredBuffer<float3> ParticlePosition_R;
RWStructuredBuffer<float3> ParticlePosition_RW;
StructuredBuffer<float3> ParticleVelocity_R;
RWStructuredBuffer<float3> ParticleVelocity_RW;
StructuredBuffer<uint> ParticleFilter_R;
RWStructuredBuffer<uint> ParticleFilter_RW;

float3 WaterGeneratePos;
uint WaterBlockResX;
uint WaterBlockResY;
uint WaterBlockResZ;
uint AddedParticleCount;
uint MaxParticleCount;
float ParticleRadius;
float3 ParticleInitVel;

float3 HashGridMin;
float HashGridCellLength;
uint3 HashGridResolution;

[numthreads(THREAD_NUM_1D, 1, 1)]
void addParticleBlock(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    int CurrParticleCount = ParticleIndrectArgment_RW[ParticleCountArgumentOffset];
    uint i = ThreadIdx + GroupIdx * THREAD_NUM_1D;
    if (i >= AddedParticleCount || CurrParticleCount + i >= MaxParticleCount)
        return;
    
    uint z = i / (WaterBlockResX * WaterBlockResY);
    uint xp = i % (WaterBlockResX * WaterBlockResY);
    uint y = xp / WaterBlockResX;
    uint x = xp % WaterBlockResX;
    ParticlePosition_RW[CurrParticleCount + i] = WaterGeneratePos + float3(x, y, z) * ParticleRadius * 2.0f;
    ParticleVelocity_RW[CurrParticleCount + i] = ParticleInitVel;
    ParticleFilter_RW[CurrParticleCount + i] = 0;
}

[numthreads(1, 1, 1)]
void updateParticleCountArgment(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    int CurrParticleCount = ParticleIndrectArgment_RW[ParticleCountArgumentOffset];
    int NewParticleCount =
            MaxParticleCount <= (CurrParticleCount + (int) AddedParticleCount) ? MaxParticleCount : CurrParticleCount + (int) AddedParticleCount;
    ParticleIndrectArgment_RW[ParticleCountArgumentOffset] = NewParticleCount;
    ParticleIndrectArgment_RW[ParticleXGridCountArgumentOffset] = (int) ceil((float) NewParticleCount / THREAD_NUM_1D);
}

StructuredBuffer<float3> TargetParticlePosition_R;
StructuredBuffer<float3> TargetParticleVelocity_R;
StructuredBuffer<uint> TargetParticleFilter_R;

RWStructuredBuffer<float3> NarrowParticlePosition_RW;
RWStructuredBuffer<float3> NarrowParticleVelocity_RW;
RWStructuredBuffer<uint> NarrowParticleFilter_RW;

StructuredBuffer<uint> ParticleScatterOffset_R;

[numthreads(THREAD_NUM_1D, 1, 1)]
void deleteParticleOutofRange(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_NUM_1D;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
    
    float3 Postion = ParticlePosition_R[i];
    float3 HashGridMax = HashGridMin + HashGridCellLength * HashGridResolution;
    if (any(Postion < HashGridMin) || any(Postion >= HashGridMax))
    {
        ParticleFilter_RW[i] = 4;
    }
}

[numthreads(THREAD_NUM_1D, 1, 1)]
void scatterParticleData(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_NUM_1D;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
    
    uint CurrTargetOffset = ParticleScatterOffset_R[i];
    uint CurrTargetFilter = TargetParticleFilter_R[i];
    if (CurrTargetFilter)
    {
        NarrowParticlePosition_RW[CurrTargetOffset] = TargetParticlePosition_R[i];
        NarrowParticleVelocity_RW[CurrTargetOffset] = TargetParticleVelocity_R[i];
        NarrowParticleFilter_RW[CurrTargetOffset] = CurrTargetFilter;
    }
}

[numthreads(1, 1, 1)]
void updateArgment(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint NewParticleCount = ParticleIndrectArgment_RW[ParticleSplitPointArgumentOffset + 3];
    ParticleIndrectArgment_RW[ParticleCountArgumentOffset] = NewParticleCount;
    ParticleIndrectArgment_RW[ParticleXGridCountArgumentOffset] = (int) ceil((float) NewParticleCount / THREAD_NUM_1D);
    ParticleIndrectArgment_RW[ParticleXGridCountArgumentOffset + 1] = 1;
    ParticleIndrectArgment_RW[ParticleXGridCountArgumentOffset + 2] = 1;
    
    uint FirstParticleStartIndex = ParticleIndrectArgment_RW[ParticleSplitPointArgumentOffset];
    uint SecondParticleStartIndex = ParticleIndrectArgment_RW[ParticleSplitPointArgumentOffset + 1];
    uint ThirdParticleStartIndex = ParticleIndrectArgment_RW[ParticleSplitPointArgumentOffset + 2];
    uint ForthParticleStartIndex = ParticleIndrectArgment_RW[ParticleSplitPointArgumentOffset + 3];
    uint FifthParticleStartIndex = ParticleIndrectArgment_RW[ParticleSplitPointArgumentOffset + 4];
    
    ParticleIndrectArgment_RW[DifferParticleCountArgumentOffset] = FirstParticleStartIndex;
    ParticleIndrectArgment_RW[DifferParticleCountArgumentOffset + 1] = SecondParticleStartIndex - FirstParticleStartIndex;
    ParticleIndrectArgment_RW[DifferParticleCountArgumentOffset + 2] = ThirdParticleStartIndex - SecondParticleStartIndex;
    ParticleIndrectArgment_RW[DifferParticleCountArgumentOffset + 3] = ForthParticleStartIndex - ThirdParticleStartIndex;
    ParticleIndrectArgment_RW[DifferParticleCountArgumentOffset + 4] = FifthParticleStartIndex - ForthParticleStartIndex;
    
    ParticleIndrectArgment_RW[FirstParticleXGridCountArgumentOffset] = (int) ceil((float) FirstParticleStartIndex / THREAD_NUM_1D);
    ParticleIndrectArgment_RW[FirstParticleXGridCountArgumentOffset + 1] = 1;
    ParticleIndrectArgment_RW[FirstParticleXGridCountArgumentOffset + 2] = 1;
    ParticleIndrectArgment_RW[SecondParticleXGridCountArgumentOffset] = (int) ceil((float) (SecondParticleStartIndex - FirstParticleStartIndex) / THREAD_NUM_1D);
    ParticleIndrectArgment_RW[SecondParticleXGridCountArgumentOffset + 1] = 1;
    ParticleIndrectArgment_RW[SecondParticleXGridCountArgumentOffset + 2] = 1;
    ParticleIndrectArgment_RW[ThirdParticleXGridCountArgumentOffset] = (int) ceil((float) (ThirdParticleStartIndex - SecondParticleStartIndex) / THREAD_NUM_1D);
    ParticleIndrectArgment_RW[ThirdParticleXGridCountArgumentOffset + 1] = 1;
    ParticleIndrectArgment_RW[ThirdParticleXGridCountArgumentOffset + 2] = 1;
    ParticleIndrectArgment_RW[ForthParticleXGridCountArgumentOffset] = (int) ceil((float) (ForthParticleStartIndex - ThirdParticleStartIndex) / THREAD_NUM_1D);
    ParticleIndrectArgment_RW[ForthParticleXGridCountArgumentOffset + 1] = 1;
    ParticleIndrectArgment_RW[ForthParticleXGridCountArgumentOffset + 2] = 1;
}

StructuredBuffer<uint> NewIndex_R;

StructuredBuffer<float3> OldPosition_R;
StructuredBuffer<float3> OldVelocity_R;
StructuredBuffer<uint> OldFilter_R;

RWStructuredBuffer<float3> RearrangedPosition_RW;
RWStructuredBuffer<float3> RearrangedVelocity_RW;
RWStructuredBuffer<uint> RearrangedFilter_RW;
[numthreads(THREAD_NUM_1D, 1, 1)]
void rearrangeParticle(uint ThreadIdx : SV_GroupIndex, uint GroupIdx : SV_GroupID)
{
    uint i = ThreadIdx + GroupIdx * THREAD_NUM_1D;
    if (i >= ParticleIndrectArgment_R[ParticleCountArgumentOffset])
        return;
    
    uint NewIndex = NewIndex_R[i];
    
    RearrangedPosition_RW[NewIndex] = OldPosition_R[i];
    RearrangedVelocity_RW[NewIndex] = OldVelocity_R[i];
    RearrangedFilter_RW[NewIndex] = OldFilter_R[i];
}