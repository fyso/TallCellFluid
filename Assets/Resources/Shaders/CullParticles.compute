#pragma kernel clearParticleCountOfGrid
#pragma kernel addUpParticleCountOfGrid
#pragma kernel clearVisibleGrid
#pragma kernel searchVisibleGrid
#pragma kernel calThicknessGrid
#include "../ShaderLibrary/Common.hlsl"
#pragma multi_compile _ _CULLWITHLAYER _CULLWITHADAPTIVE

#define GROUP_THREAD_NUM 256
int _DrawLayer;
uint _MaxVisibleCount;

float4x4 _ViewMatrixForGrid;

StructuredBuffer<float3> _ParticlePositionBuffer;
StructuredBuffer<uint> _ParticleIndirectArgment;

RWStructuredBuffer<uint> _ParticleCountOfGrid;
RWStructuredBuffer<uint> _VisibleGridBuffer;

[numthreads(GROUP_THREAD_NUM, 1, 1)]
void clearParticleCountOfGrid(uint3 DTid : SV_DispatchThreadID)
{
    _ParticleCountOfGrid[DTid.x] = 0;
}

[numthreads(GROUP_THREAD_NUM, 1, 1)]
void addUpParticleCountOfGrid(uint3 GTid : SV_GroupID, uint GIndex : SV_GroupIndex)
{
	uint particleIndex = GIndex + GTid.x * GROUP_THREAD_NUM; 
    if (particleIndex >= _ParticleIndirectArgment[4])  //TODO:ParticleCountArgumentOffset
        return;
	
    float3 pos = _ParticlePositionBuffer[particleIndex].xyz;

    //World Space mapping to View Space and 3D Texture Space
    float3 posVS = mul(_ViewMatrixForGrid, float4(pos, 1.0f));
	int3 tex3DIndex    = viewPos2Index3D(posVS);
    if (any(tex3DIndex < 0) 
        || any(tex3DIndex > int3(_PerspectiveGridDimX, _PerspectiveGridDimY, _PerspectiveGridDimZ)))
        return;
    uint cellLinerIndex = tex3DIndex2Liner(tex3DIndex);
    
    uint originValue;
    InterlockedAdd(_ParticleCountOfGrid[cellLinerIndex], 1, originValue);
}

[numthreads(GROUP_THREAD_NUM, 1, 1)]
void clearVisibleGrid(uint3 DTid : SV_DispatchThreadID)
{
    _VisibleGridBuffer[DTid.x] = 0;
}

[numthreads(8, 8, 1)]
void searchVisibleGrid(uint3 DTid : SV_DispatchThreadID)
{
    uint count = 1;
    uint sumCount = 0;
    for (uint z = 0; z < _PerspectiveGridDimZ; z++)
    {
        uint cellLinerIndex = tex3DIndex2Liner(uint3(DTid.x, DTid.y, z));
        #ifdef _CULLWITHLAYER
            if ((_ParticleCountOfGrid[cellLinerIndex] >= 1) && (count <= _DrawLayer))
            {
                _VisibleGridBuffer[cellLinerIndex] = 1;
                if (count == _DrawLayer)
                    break;
                
                count++;
            }
        #elif _CULLWITHADAPTIVE     
            _VisibleGridBuffer[cellLinerIndex] = 1;
            if (sumCount > _MaxVisibleCount)
                break;
            sumCount += _ParticleCountOfGrid[cellLinerIndex];
        #endif
    } 
}

[numthreads(8, 8, 1)]
void calThicknessGrid(uint3 DTid : SV_DispatchThreadID)
{
    uint cellLayerCount = 0;
    uint particleCountOfPreGrid = 0;
    bool innerFlag = false;
    for (uint z = 0; z < _PerspectiveGridDimZ; z++)
    {
        uint cellLinerIndex = tex3DIndex2Liner(uint3(DTid.x, DTid.y, z));
        uint count = _ParticleCountOfGrid[cellLinerIndex];
        if (particleCountOfPreGrid != 0 && count == 0)
        {
            innerFlag = false;
            break;
        }
        if (particleCountOfPreGrid == 0 && count != 0)
        {
            innerFlag = true;
        }
        if (innerFlag) cellLayerCount++;
       
        particleCountOfPreGrid = count;
    }
}